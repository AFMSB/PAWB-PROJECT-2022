definitions:
  model.Claims:
    properties:
      access_mode:
        type: integer
      userid:
        type: integer
      username:
        type: string
    type: object
  model.Follower:
    properties:
      FollowerUserID:
        type: integer
      UserID:
        type: integer
    type: object
  model.Position:
    properties:
      Latitude:
        type: number
      Longitude:
        type: number
      UserId:
        type: integer
    required:
    - Latitude
    - Longitude
    type: object
  model.User:
    properties:
      access_mode:
        type: integer
      alertTime:
        type: integer
      sos:
        type: boolean
      userFriends:
        items:
          $ref: '#/definitions/model.Follower'
        type: array
      userPositions:
        items:
          $ref: '#/definitions/model.Position'
        type: array
      username:
        type: string
    type: object
  swaggermodel.FollowingHistorySwagger:
    properties:
      end:
        example: "2022-07-01"
        type: string
      followerID:
        type: integer
      start:
        example: "2022-01-01"
        type: string
    required:
    - end
    - followerID
    - start
    type: object
  swaggermodel.FollowingSwagger:
    properties:
      FollowerUserID:
        type: integer
    type: object
  swaggermodel.PositionAddSwagger:
    properties:
      Latitude:
        example: 39.557191
        type: number
      Longitude:
        example: -7.8536599
        type: number
    required:
    - Latitude
    - Longitude
    type: object
  swaggermodel.RadiusSwagger:
    properties:
      Radius:
        type: integer
    type: object
  swaggermodel.UserLocationHistory:
    properties:
      end:
        example: "2022-07-01"
        type: string
      start:
        example: "2022-01-01"
        type: string
    required:
    - end
    - start
    type: object
  swaggermodel.UserLocationHistoryUser:
    properties:
      end:
        example: "2022-07-01"
        type: string
      start:
        example: "2022-01-01"
        type: string
      userID:
        type: integer
    required:
    - end
    - start
    - userID
    type: object
  swaggermodel.UserLocationWithFilters:
    properties:
      UserId:
        items:
          type: integer
        type: array
      end:
        example: "2022-07-01"
        type: string
      start:
        example: "2022-01-01"
        type: string
    required:
    - UserId
    - end
    - start
    type: object
  swaggermodel.UserLoginSwagger:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  swaggermodel.UserPeriodUpdateSwagger:
    properties:
      alertTimeInHours:
        type: integer
    type: object
  swaggermodel.UserRegisterSwagger:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Autentica o utilizador e gera o token para os próximos acessos
      parameters:
      - description: Do login
        in: body
        name: evaluation
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.UserLoginSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Claims'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Realizar autenticação
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Desautentica o utilizador invalidando o token atual
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: bool
        "406":
          description: Cannot log out
      summary: Realizar desautenticação
      tags:
      - Authentication
  /auth/refresh_token:
    put:
      consumes:
      - application/json
      description: Atualiza o token de autenticação do usuário invalidando o antigo
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Claims'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "406":
          description: Cannot invalidate old token
      summary: Atualiza token de autenticação
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Regista um utilizador
      parameters:
      - description: Do register
        in: body
        name: evaluation
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.UserRegisterSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Claims'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      summary: Realizar registro
      tags:
      - Authentication
  /follower/:
    delete:
      consumes:
      - application/json
      description: Desassocia um Follower de um User
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deassociate Follower from User
        in: body
        name: follower
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.FollowingSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: Deassociation Success
        "400":
          description: Token Malformed, Check Syntax
        "404":
          description: User Not found
      security:
      - BearerAuth: []
      summary: Desassocia um Follower(User) de um User
      tags:
      - Follower
    get:
      consumes:
      - application/json
      description: Exibe a lista, sem todos os campos, de todos os followers
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Follower'
            type: array
        "404":
          description: Not found
      security:
      - BearerAuth: []
      summary: Obtem os Followers
      tags:
      - Follower
    post:
      consumes:
      - application/json
      description: Associa um Follower a um User
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Associate User as Follower
        in: body
        name: follower
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.FollowingSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Follower'
            type: array
        "400":
          description: Token Malformed, Check Syntax, Follower User ID Already Associated
        "404":
          description: User Not found
      security:
      - BearerAuth: []
      summary: Associa um Follower(User) a um User
      tags:
      - Follower
  /follower/following:
    get:
      consumes:
      - application/json
      description: Exibe a lista, sem todos os campos, de todos os users que estamos
        a seguir
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Follower'
            type: array
        "404":
          description: Not found
      security:
      - BearerAuth: []
      summary: Obtem os users que estamos a seguir
      tags:
      - Follower
  /follower/history:
    post:
      consumes:
      - application/json
      description: Obtem as localizações de um determinado Follower
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: get follower locations history
        in: body
        name: follower
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.FollowingHistorySwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Position'
            type: array
        "400":
          description: Token Malformed, Check Syntax, Dates Malformed
        "401":
          description: User not authorized to check given User locations.
        "404":
          description: 'User ID Not Found, '
      security:
      - BearerAuth: []
      summary: Obtem as localizações de um Follower
      tags:
      - Follower
  /position:
    post:
      consumes:
      - application/json
      description: Cria uma localizacao de um utilizador em especifico
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Location
        in: body
        name: evaluation
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.PositionAddSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Position'
        "400":
          description: Bad request
        "404":
          description: Not found
      security:
      - BearerAuth: []
      summary: Adicionar uma localizaçao
      tags:
      - Position
  /position/:
    get:
      consumes:
      - application/json
      description: Exibe a lista da última localização do utilizador
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Position'
        "400":
          description: User Token Malformed
        "404":
          description: User Not found
      security:
      - BearerAuth: []
      summary: Obter a última localização do utilizador
      tags:
      - Position
  /position/{id}:
    delete:
      consumes:
      - application/json
      description: Exclui uma localização selecionada
      operationId: get-string-by-int
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Position ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Delete succeeded!
        "404":
          description: None found!
      security:
      - BearerAuth: []
      summary: Exclui uma localização
      tags:
      - Position
  /position/filter:
    post:
      consumes:
      - application/json
      description: Exibe a lista de localizações dos utilizadores
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Location
        in: body
        name: localization
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.UserLocationWithFilters'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Position'
            type: array
        "400":
          description: User Token Malformed
        "404":
          description: Location Not found
      security:
      - BearerAuth: []
      summary: Obtem todas as localizações dos utilizadores com filtros
      tags:
      - Position
  /position/history:
    post:
      consumes:
      - application/json
      description: Exibe a lista de todas as localizações do utilizador
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: get locations history
        in: body
        name: localization
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.UserLocationHistory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Position'
            type: array
        "400":
          description: User Token Malformed
        "404":
          description: User Not found
      security:
      - BearerAuth: []
      summary: Obtem todas as localizações do utilizador
      tags:
      - Position
  /position/history/user:
    post:
      consumes:
      - application/json
      description: Obtem todas as localizações do utilizador
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Location
        in: body
        name: localization
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.UserLocationHistoryUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Position'
            type: array
        "400":
          description: Check Syntax, Dates Malformed
        "404":
          description: UserID Not found
      security:
      - BearerAuth: []
      summary: Obtem todas as localizações do utilizador
      tags:
      - Position
  /socket:
    get:
      description: Web Socket permite enviar notificações diretamente para o frontend
      responses:
        "200":
          description: Connection confirm
        "400":
          description: User Token Malformed
        "404":
          description: Connection failed
      summary: Web Socket permite enviar notificações diretamente para o frontend
      tags:
      - Socket
  /user/:
    get:
      consumes:
      - application/json
      description: Exibe a lista, sem todos os campos, de todos os Users
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "404":
          description: Not found
      security:
      - BearerAuth: []
      summary: Obtem todos os  Users
      tags:
      - User
  /user/alert-time:
    get:
      consumes:
      - application/json
      description: Obter o tempo para alertas definido pelo utilizador
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
        "400":
          description: Bad request
      security:
      - BearerAuth: []
      summary: Obter o tempo para alertas definido pelo utilizador
      tags:
      - User
  /user/alert/time/:
    put:
      consumes:
      - application/json
      description: Atualiza a periodicidade de alerta determinando o tempo máximo
        até dar uma pessoa como perdida
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Udpdate Alert
        in: body
        name: evaluation
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.UserPeriodUpdateSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found
        "406":
          description: Not acceptable
      security:
      - BearerAuth: []
      summary: Atualiza a periodicidade de alerta
      tags:
      - User
  /user/info:
    get:
      consumes:
      - application/json
      description: Obter a informação do utilizador
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad request
      security:
      - BearerAuth: []
      summary: Obter a informação do utilizador
      tags:
      - User
  /user/last-positions:
    get:
      consumes:
      - application/json
      description: Exibe a lista, sem todos os campos, da última posição/localização
        de cada User
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "404":
          description: Not found
      security:
      - BearerAuth: []
      summary: Obtem última posição/localização de cada User
      tags:
      - User
  /user/search/{username}:
    get:
      consumes:
      - application/json
      description: Exibe a lista, sem todos os campos, de Users dado um username
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Token Malformed
      security:
      - BearerAuth: []
      summary: Obter Users dado um username
      tags:
      - User
  /user/sos:
    post:
      consumes:
      - application/json
      description: Alterar para on/off o estado do SOS do utilizador
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad request
      security:
      - BearerAuth: []
      summary: Alterar estado do SOS
      tags:
      - User
  /user/users-under-xkms:
    post:
      consumes:
      - application/json
      description: Exibe uma lista de users que se encontram num raio igual a inferior
        a x kms
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: radius
        in: body
        name: radius
        required: true
        schema:
          $ref: '#/definitions/swaggermodel.RadiusSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "401":
          description: Unauthorized
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Exibe uma lista de users que se encontram num raio igual a inferior
        a x kms
      tags:
      - User
swagger: "2.0"
